defmodule Castle.RollupLogTest do
  use Castle.DataCase
  use Castle.TimeHelpers

  import Castle.RollupLog

  test "finds an entirely missing range" do
    result = find_missing_days("foobar", 4, "2018-04-25")
    assert length(result) == 4
    assert "#{Enum.at(result, 0).date}" == "2018-04-25"
    assert "#{Enum.at(result, 1).date}" == "2018-04-24"
    assert "#{Enum.at(result, 2).date}" == "2018-04-23"
    assert "#{Enum.at(result, 3).date}" == "2018-04-22"
  end

  test "finds partial missing range" do
    upsert! build_log("foobar", 2018, 4, 24)
    upsert! build_log("foobar2", 2018, 4, 23)
    upsert! build_log("foobar", 2018, 4, 22)
    result = find_missing_days("foobar", 4, "2018-04-25")
    assert length(result) == 4
    assert "#{Enum.at(result, 0).date}" == "2018-04-25"
    assert "#{Enum.at(result, 1).date}" == "2018-04-23"
    assert "#{Enum.at(result, 2).date}" == "2018-04-21"
    assert "#{Enum.at(result, 3).date}" == "2018-04-20"
  end

  test "ignores incomplete logs" do
    upsert! build_log("foobar", 2018, 4, 24)
    upsert! build_log("foobar2", 2018, 4, 23, false)
    result = find_missing_days("foobar", 2, "2018-04-25")
    assert length(result) == 2
    assert "#{Enum.at(result, 0).date}" == "2018-04-25"
    assert "#{Enum.at(result, 1).date}" == "2018-04-23"
  end

  test "loads existing logs" do
    {1, [%{id: id}]} = Castle.Repo.insert_all Castle.RollupLog, [%{
      table_name: "foobar",
      date: Ecto.Date.from_erl({2018, 4, 22}),
      inserted_at: get_dtim("2018-04-22T22:00:00Z"),
      updated_at: get_dtim("2018-04-22T23:00:00Z"),
    }], returning: [:id]

    result = find_missing_days("foobar", 2, "2018-04-22")
    assert length(result) == 2
    log1 = Enum.at(result, 0)
    log2 = Enum.at(result, 1)

    assert "#{log1.date}" == "2018-04-22"
    assert log1.id == id
    assert log1.complete == false
    assert_time log1.inserted_at, "2018-04-22T22:00:00Z"
    assert_time log1.updated_at, "2018-04-22T23:00:00Z"

    assert "#{log2.date}" == "2018-04-21"
    assert log2.id == nil
    assert log2.complete == false
    assert log2.inserted_at == nil
    assert log2.updated_at == nil
  end

  test "finds empty range" do
    result = find_missing_days("foobar", 100, "1995-01-01")
    assert length(result) == 0
  end

  test "finds monthly range" do
    upsert! build_log("foobar", 2018, 3, 1)
    result = find_missing_months "foobar", 4, get_dtim("2018-04-25")
    assert length(result) == 4
    assert "#{Enum.at(result, 0).date}" == "2018-04-01"
    assert "#{Enum.at(result, 1).date}" == "2018-02-01"
    assert "#{Enum.at(result, 2).date}" == "2018-01-01"
    assert "#{Enum.at(result, 3).date}" == "2017-12-01"
  end

  test "updates rows that have already been inserted" do
    {1, [%{id: id}]} = Castle.Repo.insert_all Castle.RollupLog, [%{
      table_name: "foobar",
      date: Ecto.Date.from_erl({2018, 4, 22}),
      inserted_at: get_dtim("2018-04-22T22:00:00Z"),
      updated_at: get_dtim("2018-04-22T23:00:00Z"),
    }], returning: [:id]

    log1 = Castle.Repo.get(Castle.RollupLog, id)
    assert log1.table_name == "foobar"
    assert "#{log1.date}" == "2018-04-22"
    assert_time log1.inserted_at, "2018-04-22T22:00:00Z"
    assert_time log1.updated_at, "2018-04-22T23:00:00Z"

    log2 = upsert! build_log("foobar", 2018, 4, 22)
    assert log2.id == id
    assert log2.table_name == "foobar"
    assert "#{log2.date}" == "2018-04-22"
    assert Timex.compare(log2.inserted_at, log1.inserted_at) > 0
    assert Timex.compare(log2.updated_at, log1.updated_at) > 0

    # neither is accurate now - refetch timestamps
    final = Castle.Repo.get(Castle.RollupLog, id)
    assert final.table_name == "foobar"
    assert "#{final.date}" == "2018-04-22"
    assert final.inserted_at == log1.inserted_at

    # updated is "manually" set on conflict, and ends up being just slightly
    # behind the one auto-generated by ecto
    assert Timex.diff(final.updated_at, log2.updated_at, :seconds) == 0
  end

  defp build_log(name, year, month, day, complete \\ true) do
    %Castle.RollupLog{table_name: name, date: Ecto.Date.from_erl({year, month, day}), complete: complete}
  end
end
